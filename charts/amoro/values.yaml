#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
##
kubeVersion: ""
clusterDomain: cluster.local

## @param fullnameOverride used to name different instances
## If not set, default value is amoro-{random string} created by bitnamicharts dependency
##
fullnameOverride: ""

## @param nameOverride used to name different clusters, especially for label app.kubernetes.io/name
## If not set, default value is amoro
##
nameOverride: ""

## AMS image info
##
image:
  ## @param image.repository AMS image repository
  ##
  repository: apache/amoro
  ## @param image.tag for AMS image repository
  ##
  tag: ""
  ## @param image.pullPolicy pull policy for AMS image, along with other images, e.g. Flink Optimizer
  ##
  pullPolicy: IfNotPresent

## @param imagePullSecrets pull secret for image if needed
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: [ ]

## ServiceAccount of Amoro to schedule optimizer
## ref: https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/service-account-v1/
##
serviceAccount:
  ## @param serviceAccount.create specifies whether a service account should be created or using an existed account
  ##
  create: true
  ##  @param serviceAccount.annotations will be added to the service account
  ##
  annotations: { }
  ## Using an existed account, set @param name to the account and @param serviceAccount.create := false, or creating a new one with @param serviceAccount.create := true
  ## The default value is amoro-{random string} which automatically created by bitnamicharts dependency, or override by @param fullnameOverride
  ##
  name: ~
  ## RBAC related with serviceAccount
  ## Role ref: https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-v1/
  ## RoleBinding ref: https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-binding-v1/
  ## ClusterRole ref: https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-v1/
  ## ClusterRoleBinding ref: https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-binding-v1/
  ##
  rbac:
    ## If @param serviceAccount.rbac.create := true, role/role-bind or cluster-role/cluster-role-bind will be created along with service account
    ##
    create: true
    ## Create a cluster-role and cluster-role-bind if @param serviceAccount.rbac.cluster := true. Otherwise, role and role-bind will be done
    ##
    cluster: false


## Service of Amoro to provide connection method
## ref: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/
##
server:
  ## AMS REST Service
  ##
  rest:
    enabled: true
    port: 1630
    service:
      ## @param type Can set as "ClusterIP" or "NodePort". If set to "NodePort", @param nodePort below should set a value
      ##
      type: ClusterIP
      port: "{{ .Values.server.rest.port }}"
      nodePort: ~
      annotations: { }

  ## AMS Thrift Server For table services
  ##
  table:
    enabled: true
    port: 1260
    service:
      ## @param type Can set as "ClusterIP" or "NodePort". If set to "NodePort", @param nodePort below should set a value
      ##
      type: ClusterIP
      port: "{{ .Values.server.table.port }}"
      nodePort: ~
      annotations: { }

  ## AMS Thrift Server For optimizing services
  ##
  optimizing:
    enabled: true
    port: 1261
    service:
      ## @param type Can set as "ClusterIP" or "NodePort". If set to "NodePort", @param nodePort below should set a value
      ##
      type: ClusterIP
      port: "{{ .Values.server.optimizing.port }}"
      nodePort: ~
      annotations: { }

## @param amoroHome is amoro Base Dir, default /usr/local/amoro
##
amoroHome: ~

## @param jvmOptions jvm options
##
jvmOptions: ~
## e.g:
## jvmOptionsï¼š
##   xms=8196
##   xmx=8196
##   jmx.remote.port=
##   extra.options="-XX:NewRatio=1 -XX:SurvivorRatio=3"

## AMS configurations files
##
amoroConf:
  ## AMS Dashboard username and password
  ##
  ams:
    adminUsername: admin
    adminPassword: admin

  ## AMS database properties, default value is derby. For production environment, suggest to use mysql
  ##
  database:
    type: derby
    driver: org.apache.derby.jdbc.EmbeddedDriver
    url: jdbc:derby:/tmp/amoro/derby;create=true

  ## e.g:
  ##    type: mysql
  ##    driver: com.mysql.cj.jdbc.Driver
  ##    url: jdbc:mysql://127.0.0.1:3306/db?useUnicode=true&characterEncoding=UTF8&autoReconnect=true&useAffectedRows=true&allowPublicKeyRetrieval=true&useSSL=false
  ##    username: admin
  ##    password: admin

  ## e.g:
  ##    type: postgres
  ##    driver: org.postgresql.Driver
  ##    url: jdbc:postgresql://127.0.0.1:5432/db
  ##    username: admin
  ##    password: admin

  ## AMS terminal properties, default value is local. Another choice is kyuubi.
  ##
  terminal:
    backend: local
    icebergHandleTimestampWithoutTimezone: false

  ## Kyuubi terminal backend configuration.
  ## ref: https://kyuubi.readthedocs.io/en/master/quick_start/index.html
  ## e.g:
  ##  terminal:
  ##    backend: kyuubi
  ##    kyuubiJdbcUrl: jdbc:hive2://127.0.0.1:10009/

  ## @param amoroDefaults The value (templated string) is used for conf.yaml file
  ## ref: https://github.com/apache/amoro/blob/master/amoro-ams/dist/src/main/amoro-bin/conf/config.yaml
  ##
  amoroDefaults: ~
  ##
  ## @param log4j2 The value (templated string) is used for conf/log4j2.xml file
  ## ref: https://github.com/apache/amoro/blob/master/amoro-ams/dist/src/main/amoro-bin/conf/log4j2.xml
  log4j2: ~

## Configure the container of optimizer that allows you to submit optimizer by AMS
##
optimizer:
  ## flink optimizer
  ##
  flink:
    ## @param optimizer.flink.enabled Enable the flink optimizer
    ##
    enabled: true
    ## @param optimizer.flink.name container name, default value is flink
    ##
    name: ~
    ## image information of flink optimizer
    ##
    image:
      ## @param optimizer.flink.image.repository the image repository
      ##
      repository: apache/amoro-flink-optimizer
      ## @param optimizer.flink.image.tag the image tag, if not set, the default value is the same with amoro image tag
      ##
      tag: ~
      pullPolicy: IfNotPresent
      jobUri: "local:///opt/flink/usrlib/optimizer-job.jar"
    properties: {
      "flink-conf.taskmanager.memory.managed.size": "32mb",
      "flink-conf.taskmanager.memory.network.max": "32mb",
      "flink-conf.taskmanager.memory.network.min": "32mb"
    }
  ##
  ## spark optimizer
  ##
  spark:
    ## @param optimizer.spark.enabled enable the spark optimizer
    ##
    enabled: true
    ## @param optimizer.spark.name container name, default value is spark
    ##
    name: ~
    ## image information of spark optimizer
    ##
    image:
      ## @param optimizer.spark.image.repository the image repository
      ##
      repository: apache/amoro-spark-optimizer
      ## @param optimizer.spark.image.tag the image tag, if not set, the default value is the same with amoro image tag
      ##
      tag: ~
      pullPolicy: IfNotPresent
      jobUri: "local:///opt/spark/usrlib/optimizer-job.jar"
    properties: {
      "master": "k8s://https://kubernetes.default.svc",
      "deploy-mode": "cluster",
      "export.HADOOP_USER_NAME": "hadoop",
      "spark-conf.spark.dynamicAllocation.enabled": "true",
      "spark-conf.spark.shuffle.service.enabled": "false",
      "spark-conf.spark.dynamicAllocation.shuffleTracking.enabled": "true"
    }
  ##
  ## local optimizer
  ##
  local:
    ## @param optimizer.local.enabled enable the local optimizer container
    ##
    enabled: true
    ## @param optimizer.local.name local optimizer container name. default value is local
    ##
    name: ~
    ## @param optimizer.local.properties properties for optimizer container
    ##
    properties: ~
  kubernetes:
    # enable the kubernetes optimizer container
    enabled: true
    properties:
      namespace: "default"
      kube-config-path: "~/.kube/config"
      image: "apache/amoro:latest"
      pullPolicy: "IfNotPresent"
  extra: []

## Configure the plugin that allows you to access the metric reporters and event listeners.
##
plugin:
  ##
  ## metric reporters
  ##
  metricReporters: ~
## e.g:  
##  metricReporters:
##    ## @param Configure Prometheus exporter
##    ##
##    - name: prometheus-exporter
##      ## @param Enable or disable the Prometheus exporter
##      ##
##      enabled: true
##      ## @param Properties for the Prometheus exporter
##      ##
##      properties:
##        port: 7001
##      ## @param Kubernetes service configuration for the Prometheus exporter
##      ## ref: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/
##      ##
##      service:
##        type: ClusterIP
##        port: "7001"
##        nodePort: ~
##        annotations: {
##          "prometheus.io/scrape": "true",
##          "prometheus.io/path": "/metrics",
##          "prometheus.io/port": "7001"
##        }

## Configure the ingress resource that allows you to access the
## Amoro installation. Set up the URL
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress controller resource for Amoro Dashbord
  ##
  enabled: false
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.ingressClassName IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster.
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: ""
  ## @param ingress.hostname Default host for the ingress resource
  ##
  hostname: amoro.local
  ## @param ingress.path The Path to MinIO&reg;. You may need to set this to '/*' in order to use this with ALB ingress controllers.
  ##
  path: /
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/##supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations: { }
  ## @param ingress.tls Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## e.g:
  ## extraHosts:
  ##   - name: amoro.local
  ##     path: /
  ##
  extraHosts: [ ]
  ## @param ingress.extraPaths Any additional paths that may need to be added to the ingress under the main host
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: [ ]
  ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/##tls
  ## e.g:
  ## extraTls:
  ## - hosts:
  ##     - amoro.local
  ##   secretName: amoro.local-tls
  ##
  extraTls: [ ]
  ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate are expected in PEM format
  ## name should line up with a secretName set further up
  ##
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## secrets:
  ##   - name: amoro.local-tls
  ##     key: ""
  ##     certificate: ""
  ##
  secrets: [ ]
  ## @param ingress.extraRules Additional rules to be covered with this ingress record
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/##ingress-rules
  ## e.g:
  ## extraRules:
  ## - host: example.local
  ##     http:
  ##       path: /
  ##       backend:
  ##         service:
  ##           name: example-svc
  ##           port:
  ##             name: http
  ##
  extraRules: [ ]

## Liveness probe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 40
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 10
  successThreshold: 1

## Readiness probe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 10
  successThreshold: 1

## Resource requests and limits for Amoro pods
##
resources: { }
## e.g:
##  resources:
##    requests:
##      cpu: 2
##      memory: 4Gi
##    limits:
##      cpu: 4
##      memory: 10Gi

## @param env Environment variables (templated)
##
env: [ ]
## @param envFrom Environment variables from ConfigMaps and Secrets (templated)
##
envFrom: [ ]
## @param volumes Additional volumes for AMS pod (templated)
##
volumes: [ ]
## @param volumeMounts Additional volumeMounts for AMS container (templated)
##
volumeMounts: [ ]
## @param nodeSelector Constrain Amoro pods to nodes with specific node labels
##
nodeSelector: { }
## @param tolerations Allow to schedule Amoro pods on nodes with matching taints
##
tolerations: [ ]
## @param affinity Constrain Amoro pods to nodes by complex affinity/anti-affinity rules
##
affinity: { }
## @param securityContext Amoro pods security context
##
securityContext: { }
## @param commonLabels Amoro Common Labels for custom
##
commonLabels: { }
## @param commonAnnotations Amoro Common Annotations for custom
##
commonAnnotations: { }