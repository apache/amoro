#  Licensed to the Apache Software Foundation (ASF) under one
#    or more contributor license agreements.  See the NOTICE file
#    distributed with this work for additional information
#    regarding copyright ownership.  The ASF licenses this file
#    to you under the Apache License, Version 2.0 (the
#    "License"); you may not use this file except in compliance
#    with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.


suite: Test Amoro Deployment
templates:
  - amoro-configmap.yaml
  - amoro-deployment.yaml
chart:
  appVersion: 0.1.0
  version: 0.6.0
tests:
  - it: Amoro Deployment should override name if set
    template: amoro-deployment.yaml
    set:
      fullnameOverride: test
      nameOverride: test1
    asserts:
      - containsDocument:
          kind: Deployment
          apiVersion: apps/v1
          name: test
      - hasDocuments:
          count: 1
      - isSubset:
          path: spec.selector.matchLabels
          content:
            app.kubernetes.io/name: test1
      - isSubset:
          path: spec.template.metadata.labels
          content:
            app.kubernetes.io/name: test1
  - it: Amoro Deployment should contain imagePullSecrets if set
    template: amoro-deployment.yaml
    set:
      imagePullSecrets:
        - name: test
    asserts:
      - exists:
          path: spec.template.spec.imagePullSecrets
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: test
  - it: Amoro Deployment should set if serviceAccount.name is set even though serviceAccount.create is false
    template: amoro-deployment.yaml
    set:
      serviceAccount:
        create: false
        name: test
    asserts:
      - exists:
          path: spec.template.spec.serviceAccountName
      - equal:
          path: spec.template.spec.serviceAccountName
          value: test
  - it: Amoro Deployment should set default value if serviceAccount.name is set even though serviceAccount.create is false
    template: amoro-deployment.yaml
    set:
      fullnameOverride: test
      serviceAccount:
        create: true
    asserts:
      - exists:
          path: spec.template.spec.serviceAccountName
      - equal:
          path: spec.template.spec.serviceAccountName
          value: test
  - it: Amoro Deployment should reflect securityContext if set
    template: amoro-deployment.yaml
    set:
      securityContext:
        runAsUser: 2000
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].securityContext
          value:
            runAsUser: 2000
      - equal:
          path: spec.template.spec.securityContext
          value:
            runAsUser: 2000
  - it: Amoro Deployment should reflect pullPolicy if set
    template: amoro-deployment.yaml
    set:
      image:
        pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].imagePullPolicy
          value: Always
  - it: Amoro Deployment should add env if database type is set to mysql
    template: amoro-deployment.yaml
    set:
      fullnameOverride: test
      amoroConf:
        database:
          type: "mysql"
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].env
          content:
            name: "AMS_DATABASE_USERNAME"
            valueFrom:
              secretKeyRef:
                name: test
                key: DatabaseUsername
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].env
          content:
            name: "AMS_DATABASE_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: test
                key: DatabasePassword
  - it: Amoro Deployment should add env if database type is set to postgres
    template: amoro-deployment.yaml
    set:
      fullnameOverride: test
      amoroConf:
        database:
          type: "postgres"
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].env
          content:
            name: "AMS_DATABASE_USERNAME"
            valueFrom:
              secretKeyRef:
                name: test
                key: DatabaseUsername
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].env
          content:
            name: "AMS_DATABASE_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: test
                key: DatabasePassword
  - it: Amoro Deployment should add env if set
    template: amoro-deployment.yaml
    set:
      env:
        - name: "ABC-TEST"
          value: "ABC-VALUE"
        - name: "ABC-TEST2"
          value: "ABC-VALUE2"
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].env
          content:
            name: "ABC-TEST"
            value: "ABC-VALUE"
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].env
          content:
            name: "ABC-TEST2"
            value: "ABC-VALUE2"
  - it: Amoro Deployment should add envFrom if set
    template: amoro-deployment.yaml
    set:
      env:
        - name: "ABC-TEST"
          valueFrom:
            secretKeyRef:
              name: abc
              key: abc
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].env
          content:
            name: "ABC-TEST"
            valueFrom:
              secretKeyRef:
                name: abc
                key: abc
  - it: Amoro Deployment should reflect ports of services
    template: amoro-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].ports
          content:
            name: rest
            containerPort: 1630
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].ports
          content:
            name: table
            containerPort: 1260
      - contains:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].ports
          content:
            name: optimizing
            containerPort: 1261
  - it: Amoro Deployment should not exist livenessProbe if enabled is set to false
    template: amoro-deployment.yaml
    set:
      livenessProbe:
        enabled: false
    asserts:
      - notExists:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].livenessProbe
  - it: Amoro Deployment should exist livenessProbe if enabled is set to true
    template: amoro-deployment.yaml
    set:
      livenessProbe:
        enabled: true
    asserts:
      - exists:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].livenessProbe
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].livenessProbe.initialDelaySeconds
          value: 40
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].livenessProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].livenessProbe.timeoutSeconds
          value: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].livenessProbe.failureThreshold
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].livenessProbe.successThreshold
          value: 1
  - it: Amoro Deployment should not exist readinessProbe if enabled is set to false
    template: amoro-deployment.yaml
    set:
      readinessProbe:
        enabled: false
    asserts:
      - notExists:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].readinessProbe
  - it: Amoro Deployment should exist readinessProbe if enabled is set to true
    template: amoro-deployment.yaml
    set:
      readinessProbe:
        enabled: true
    asserts:
      - exists:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].readinessProbe
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].readinessProbe.initialDelaySeconds
          value: 30
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].readinessProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].readinessProbe.timeoutSeconds
          value: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].readinessProbe.failureThreshold
          value: 10
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].readinessProbe.successThreshold
          value: 1
  - it: Amoro Deployment should reflect resources
    template: amoro-deployment.yaml
    set:
      resources:
        requests:
          cpu: 2
          memory: 4Gi
        limits:
          cpu: 4
          memory: 10Gi
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].resources.requests.cpu
          value: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].resources.requests.memory
          value: 4Gi
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].resources.limits.cpu
          value: 4
      - equal:
          path: spec.template.spec.containers[?(@.name == "amoro-ams")].resources.limits.memory
          value: 10Gi
  - it: Amoro Deployment should not reflect nodeSelector if not set
    template: amoro-deployment.yaml
    set:
      nodeSelector:
    asserts:
      - notExists:
          path: spec.template.spec.nodeSelector
  - it: Amoro Deployment should reflect nodeSelector
    template: amoro-deployment.yaml
    set:
      nodeSelector:
        disktype: ssd
    asserts:
      - exists:
          path: spec.template.spec.nodeSelector
      - equal:
          path: spec.template.spec.nodeSelector
          value:
            disktype: ssd
  - it: Amoro Deployment should not reflect tolerations if not set
    template: amoro-deployment.yaml
    set:
      tolerations:
    asserts:
      - notExists:
          path: spec.template.spec.tolerations
  - it: Amoro Deployment should reflect tolerations
    template: amoro-deployment.yaml
    set:
      tolerations:
        - key: "example-key"
          operator: "Exists"
          effect: "NoSchedule"
    asserts:
      - exists:
          path: spec.template.spec.tolerations
      - contains:
          path: spec.template.spec.tolerations
          content:
            key: "example-key"
            operator: "Exists"
            effect: "NoSchedule"
  - it: Amoro Deployment should not reflect affinity if not set
    template: amoro-deployment.yaml
    set:
      affinity:
    asserts:
      - notExists:
          path: spec.template.spec.affinity
  - it: Amoro Deployment should reflect affinity
    template: amoro-deployment.yaml
    set:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: disktype
                    operator: In
                    values:
                      - ssd
    asserts:
      - exists:
          path: spec.template.spec.affinity
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: disktype
                        operator: In
                        values:
                          - ssd